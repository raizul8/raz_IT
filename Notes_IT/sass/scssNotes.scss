//compass compile
compass compile --force -e production

// add this conditional setting in your Compass configuration: 
if environment == :production
 output_style = :compact
end

$blue: lightsteelblue;

// mixin default value $blue
@mixin sameColor($mWidth: 200px, $mHeight: 100px, $mTextColor: green, $mColor: $blue) {
	background-color: $mColor;
	width: $mWidth;
	height: $mHeight;
	color: $mTextColor;
}

// include mixin in class
.sameBox { @include sameColor(black, 300px, 100px, white);}

// Selector inheritance
.p1 {
	margin: 25px 100px 100px 50px;
	color: darkgreen;
	font-size: 25px;
}

.p2 {
	@extend .p1;
	border: 1px solid red;
}

// Selector inheritance with the placeholder selector
// the placeholder selector was
// introduced to allow you to use selector inheritance without creating throwaway base
// classes.
%button-reset {
 margin: 0;
 padding: .5em 1.2em;
 text-decoration: none;
 cursor: pointer;
}

.save {
	 @extend %button-reset;
	 color: white;
	 background: #blue;
}
.delete {
	@extend %button-reset;
	color: white;
	background: red;
}


// common class style for intro and feature
.intro, .feature {
	color: red;
}
.intro { font-size: 50px;}
.feature {font-size: 45px;}


// Shortcut .circle:hover selector
.circle { 
	&:hover {background-color: black;}
}

// add body.ie before the parent selector
#content aside {
 color: red;
 body.ie & { color: green }
}

// create a list of links from array
$icons:(twitter, facebook, youtube, rss);
ul .social-links li {
	list-style: none;
	a {display: block; float: left; width: 100px; height: 50px;}
}

@each $social in $icons {
	.#{$social} {
		background: url('../img/#{$social}.jpg') no-repeat;
	}
}

// nth(list, nr element)
// nth takes the element at the specified position from list
// ex: nth(one, two, three, four, five, six, 6) => six

// for each $p list do 
// 1. create class with first element ex: one
// 2. set background-color for class one with the second element from list p
// 3. set color for class one with the third element
@each $p in (
	one black yellow,
	two black + 30 blue,
	three black + 60 red,
	four black + 90 green
) {
	.#{nth($p,1)} { 
		width: 800px;
		height: 100px;
		background-color: #{nth($p,2)};
		color: #{nth($p,3)};
	}
}

// chose where parent selector resides
a {
  font-weight: bold;
  text-decoration: none;
  &:hover { text-decoration: underline; }
  body.firefox & { font-weight: normal; }
}

// &:after is cool
@mixin clear() {
    &:before, &:after {
        content: "\0020";
        display: block;
        height: 0;
        overflow: hidden;
    }
    &:after {
        clear: both;
    }
}

// type  border-style,  border-width,  border-color

nav {
	border: {
		style: solid;
		width: 1px;
		color: #ccc;
	}
}

// You can even write styles for shorthand properties followed by nested exceptions:

nav {
 border: 1px solid #ccc {
 left: 0px;
 right: 0px;
 }
}

// default value
$link-color: red !default;

// import file _blue-theme.scss in .blue-theme class
// Any variables or mixins (see section 2.5) defined in the  @import ed file are also avail -
// able in the rule. They aren’t available outside it, though.
.blue-theme {@import "blue-theme"}

// Sass allows the
// arguments to be explicitly named using the syntax  $name: value . Named arguments
// can go in any order, as long as they’re all present:
a {
@include link-colors(
	$normal: blue,
	$visited: green,
	$hover: red
);
}

// default value for mixin
@mixin link-colors(
	 $normal,
	 $hover: $normal,
	 $visited: $normal
	 ) {
		 color: $normal;
		 &:hover { color: $hover; }
		 &:visited { color: $visited; }
}












