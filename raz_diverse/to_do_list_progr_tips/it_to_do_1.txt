
buy chair like herman miller but more affordable

ledge" = 56 (sound rather than spelling)
"Editing Memorize Numbers (section)" = 1123340239400762

// Do leetcode problems

// plan 1
database book
testing book Dave Farley
documentation should be from code

a little css/scss and web design
basic algorithms

// algorithms and data structures for rust
// rust design patterns, there is an online book now
// learn words useful for programming names

//**********************
to learn
simple drawing like for children
link picture with meaning, start to think in pictures, pictures must make sense to you, simple pictures are just fine.
This will make your learning potential increase.

// To be productive

busyness is not productivity

Prioritize and plan.

Some things are more important than others, try to figure what they are. Choose one or two so you can get them done the next day, so you can be closer to your goal.

Limit the number of tasks at a reasonable, doable level so you can achieve it. When you go to bed you want to know you achieved something.

Plan ahead at least a day before.

Consider your peak productivity time during the day and do the hard or creative things then.
Group similar things together.

Make an environment where you are not distracted.
Task switching, that's bad

If you have things that keep repeating like setting up a project, try to write a script to automatize the task.


// To learn 
* exercise improves brain functions, even dancing a few steps
* short study sessions, learn for about 1 hour take break, move in the break if you can

*reading over and over is counter productive, test your knowledge between study sessions, if you can find 
study partner and test one another, reflect on what you learned, talk with someone that has knowledge on the subject,
remember when you learn you stuff that information in the short term memory, if you stuff too much you are going to erase other information

* if you can take a nap everyday, helps brain organize what you learn + sleep well at night as much as 
possible, ALL NIGHT study session does not work it hinder the ability to learn of the brain, information overload is just overbearing, it may take up to 4 days to recover

* strike a pose like superhero to reduce catabolic hormone like cortisol
//
A software program has three parts
Input/Inputs -> Processes -> Output/Outputs

//
PlantUML
- Flowcharts(*** these are important)
•	System flow chart
•	Data flow chart
•	Document flow chart
•	Program flow chart

- software engineering

- audio bryan tracy

Mockingbird wireframe tool
8 SWEEBOK, software development methodology, behaviour d dev or tdd, continuous integration
9 Schedule, learn stuff fast
11 exercism.io
13 Google fonts, www.colorcombos.com
20 interaction flow modeling languace (designing data-intensive web applications)
css Tailwind interesting utility framework
figma, design and prototype

// diverse IT

great mnemonic technique

numbers. code simplicity book
7184 9761 37

---------////////////////-------------------/////////////////////----------------

If you are doing games and graphics, you of course are going to need vector and matrix math, as well as some calculus and probably some statistics.
http://en.wikipedia.org/wiki/Foundations_of_mathematics
Algebra

Same theory : Logic, Category theory, Type theory.

Set theory, Algebraic types, Algebra of types

Somehow do programming stuff every day.

html, dataflow diagrams, sysadmin, regex book



// diverse
crc cards + UML

make or find prg that makes programming easier, (ex: like a visualization tool that makes diagrams 
from your code, create diagrams and have them generate code(maybe is a good idea maybe not), look for that programming lg for kids that uses visualization(scratch))

create, find, assemble prg to make web dev faster easier

The subject of Category Theory doesn't exactly make for an easy read, but Bartosz's posts are the best ones I've found so far.

<---------
lambda calculus, type theory, functional programming, 
algorithms + data structures,algebra,calculus,discrete foundational math,courses Brilliant, sites that solve and show you how they solved math problem
learn how to design,plan programs
Angular, RxJS, css Tailwind
postgreSQL, intro to db design, git
bryan tracy, 20h learn everything, nightingale

site that teaches Math and Alg, exercism.io, site to learn git Books(code complete, func prog for dummies etc),database,graphql,dataloader,TDD,learn how to design code, golden files testing, 
How to make reports(similar crystal reports), spreadsheets from database data, 


PlantUML

 GraphQLHub

UML vids,don't use chanels go,jsonplaceholder site returns json resp


 -------------/>


learn how to name things, variables functions etc., maybe there is a tutorial or something

Math:
	*Type Theory(a must)
	Discrete mathematics
	Cartesian geometry (coordinates)
	Basic calculus (limits)
	Statistics
	Linear algebra
	Abstract algebra
	Information theory (or Information entropy not sure)
	Euclidean geometry
	Differential and integral calculus (the rest of Calc I or business calc, plus some of Calc 2)
	Probability
	Analytical geometry (calculus with trigonometry)
	Analysis
	Differential equations


// Regular expression helper: Regex 101 (This is a tool)
Chrome extension daily.dev News for Busy Developers


//
web development
vizbug extension (modify site with a design tool)
make black jack ,poker or other game, stock prices, or just build sites as fast as possible

****************************
See if you can do online payments from the backend not the frontend

api key
api token


// books to read
Algorithms + Data Structures
The mythical man Month,
The algorithm design manual
pragmatic programmer
just enough s analysis
Don't Make Me Think by Steve Krug
Domain Modeling Made Functional


// BDD testing
Spec not Test
Scenario Not Test Case

Given, When, Then
Given these start conditions, when we carry out these actions, then we expect this outcome

Start specs with 'Should' instead of Test
ShouldAddTwoNumber vs TestAddTwoNumbers